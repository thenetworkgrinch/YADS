name: Build and Release Yet Another Driver Station

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean

env:
  QT_VERSION: '6.5.3'
  CMAKE_VERSION: '3.21.0'

jobs:
  # Skip builds for draft PRs
  check-draft:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      is_draft: ${{ steps.check.outputs.is_draft }}
    steps:
      - name: Check if PR is draft
        id: check
        run: |
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "is_draft=true" >> $GITHUB_OUTPUT
            echo "Skipping build for draft PR"
          else
            echo "is_draft=false" >> $GITHUB_OUTPUT
          fi

  build:
    needs: [check-draft]
    if: always() && (github.event_name != 'pull_request' || needs.check-draft.outputs.is_draft == 'false')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Windows
            qt_arch: win64_msvc2019_64
            artifact_name: YetAnotherDriverStation-Windows
            cmake_generator: "Visual Studio 17 2022"
            cmake_arch: "-A x64"
          - os: ubuntu-latest
            name: Linux
            qt_arch: gcc_64
            artifact_name: YetAnotherDriverStation-Linux
            cmake_generator: "Ninja"
            cmake_arch: ""
          - os: macos-latest
            name: macOS
            qt_arch: clang_64
            artifact_name: YetAnotherDriverStation-macOS
            cmake_generator: "Ninja"
            cmake_arch: ""

    runs-on: ${{ matrix.os }}
    name: Build on ${{ matrix.name }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Clone QHotkey
      run: |
        git clone --depth 1 https://github.com/Skycoder42/QHotkey.git thirdparty/QHotkey

    - name: Install Qt
      uses: jurplel/install-qt-action@v3.3.0
      with:
        version: ${{ env.QT_VERSION }}
        host: ${{ runner.os == 'Linux' && 'linux' || runner.os == 'Windows' && 'windows' || 'mac' }}
        target: desktop
        arch: ${{ matrix.qt_arch }}
        cache: true
        modules: 'qtnetworkauth qtmultimedia qtcharts'
        tools: 'tools_cmake'

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libudev-dev \
          libgl1-mesa-dev \
          libxkbcommon-x11-0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render-util0 \
          libxcb-xinerama0 \
          libxcb-xfixes0 \
          libx11-dev \
          libxtst-dev \
          ninja-build

    - name: Setup MSVC (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64

    - name: Install Ninja (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja

    - name: Install CMake
      uses: lukka/get-cmake@latest
      with:
        cmakeVersion: ${{ env.CMAKE_VERSION }}
        ninjaVersion: latest

    - name: Configure CMake
      run: |
        cmake -B build -S . \
          -DENABLE_GLOBAL_SHORTCUTS=ON \
          -DENABLE_FMS_SUPPORT=ON \
          -DENABLE_GLASS_INTEGRATION=ON \
          -DENABLE_DASHBOARD_MANAGEMENT=ON \
          -DENABLE_PRACTICE_MATCH=ON

    - name: Build
      run: |
        cmake --build build --config Release --parallel

    - name: Create AppImage (Linux)
      if: runner.os == 'Linux'
      run: |
        wget -O linuxdeploy https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget -O linuxdeploy-plugin-qt https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy linuxdeploy-plugin-qt
        mkdir -p AppDir/usr/bin
        cp build/YetAnotherDriverStation AppDir/usr/bin/
        cp -r dashboards AppDir/usr/share/
        ./linuxdeploy --appdir AppDir --plugin qt --output appimage
        mv Yet_Another_Driver_Station-*.AppImage ${{ matrix.artifact_name }}.AppImage

    - name: Create macOS Bundle
      if: runner.os == 'macOS'
      run: |
        macdeployqt build/YetAnotherDriverStation.app -qmldir=qml
        cp -r dashboards build/YetAnotherDriverStation.app/Contents/Resources/
        cd build
        tar -czf ../${{ matrix.artifact_name }}.tar.gz YetAnotherDriverStation.app

    - name: Package Windows
      if: runner.os == 'Windows'
      run: |
        windeployqt build/Release/YetAnotherDriverStation.exe --qmldir qml
        Copy-Item -Recurse dashboards build/Release/
        cd build/Release
        7z a ../../${{ matrix.artifact_name }}.zip YetAnotherDriverStation.exe *.dll platforms/ qml/ dashboards/

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: |
          ${{ matrix.artifact_name }}.zip
          ${{ matrix.artifact_name }}.AppImage
          ${{ matrix.artifact_name }}.tar.gz
        retention-days: 30

  # Comment on PR with download links
  pr-comment:
    needs: [build]
    if: github.event_name == 'pull_request' && !failure() && !cancelled()
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.payload.pull_request.number;
            const run_id = context.runId;
            
            const comment = `## ðŸš€ Build Artifacts Ready!
            
            Your PR has been built successfully across all platforms. Download the artifacts to test your changes:
            
            ### Download Links
            - [Windows Build](https://github.com/${owner}/${repo}/actions/runs/${run_id})
            - [macOS Build](https://github.com/${owner}/${repo}/actions/runs/${run_id})
            - [Linux Build](https://github.com/${owner}/${repo}/actions/runs/${run_id})
            
            **Note:** Artifacts are available for 30 days. Click the links above to access the GitHub Actions page and download the artifacts.
            
            ### Testing Checklist
            Please test the relevant configurations for your changes:
            - [ ] Windows functionality
            - [ ] macOS functionality  
            - [ ] Linux functionality
            - [ ] Robot communication
            - [ ] Emergency stop functionality
            - [ ] Global shortcuts (Space for enable/disable, Enter for current mode)
            - [ ] Controller detection
            - [ ] Feature flags work as expected
            `;
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: comment
            });

  # Create release if this is a tag push
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          YetAnotherDriverStation-Linux/*.AppImage
          YetAnotherDriverStation-Windows/*.zip
          YetAnotherDriverStation-macOS/*.tar.gz
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3.3.0
      with:
        version: ${{ env.QT_VERSION }}
        host: linux
        target: desktop
        arch: gcc_64
        cache: true
        modules: 'qtnetworkauth qtmultimedia qtcharts'
   
    - name: Install CMake
      uses: lukka/get-cmake@latest
    
    - name: Clone QHotkey for test
      run: |
        git clone --depth 1 https://github.com/Skycoder42/QHotkey.git thirdparty/QHotkey
    
    - name: Test build configuration
      run: |
        cmake -B build-test -DCMAKE_BUILD_TYPE=Debug -G Ninja
        cmake --build build-test --config Debug
        echo "Build configuration test passed"
    
    - name: Test feature flags
      run: |
        echo "Testing with all features disabled..."
        cmake -B build-test-minimal \
          -DCMAKE_BUILD_TYPE=Debug \
          -DENABLE_GLOBAL_SHORTCUTS=OFF \
          -DENABLE_FMS_SUPPORT=OFF \
          -DENABLE_GLASS_INTEGRATION=OFF \
          -DENABLE_DASHBOARD_MANAGEMENT=OFF \
          -DENABLE_PRACTICE_MATCH=OFF \
          -G Ninja
        cmake --build build-test-minimal --config Debug
        echo "Feature flags test passed"
