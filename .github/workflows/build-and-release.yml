name: Build and Release Yet Another Driver Station

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      create_release:
        description: 'Create a new release'
        required: false
        default: false
        type: boolean
      release_tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: false
        type: string

env:
  QT_VERSION: '6.5.0'
  CMAKE_VERSION: '3.21.0'

jobs:
  # Skip builds for draft PRs
  check-draft:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    outputs:
      is_draft: ${{ steps.check.outputs.is_draft }}
    steps:
      - name: Check if PR is draft
        id: check
        run: |
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "is_draft=true" >> $GITHUB_OUTPUT
            echo "Skipping build for draft PR"
          else
            echo "is_draft=false" >> $GITHUB_OUTPUT
          fi

  build-windows:
    needs: [check-draft]
    if: always() && (github.event_name != 'pull_request' || needs.check-draft.outputs.is_draft == 'false')
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: windows
        target: desktop
        arch: win64_msvc2019_64
        modules: 'qtnetworkauth qtmultimedia'
    
    - name: Setup MSVC
      uses: microsoft/setup-msbuild@v1.1
    
    - name: Setup Visual Studio environment
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
    
    - name: Clone QHotkey
      run: |
        git clone https://github.com/Skycoder42/QHotkey.git thirdparty/QHotkey
        cd thirdparty/QHotkey
        git checkout master

    - name: Build QHotkey
      run: |
        cd thirdparty/QHotkey
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -G "Visual Studio 16 2019" -A x64
        cmake --build . --config Release
        cmake --install . --config Release

    - name: Build application
      run: |
        qmake YetAnotherDriverStation.pro CONFIG+=release
        jom
    
    - name: Package Windows
      run: |
        mkdir deploy
        copy build\release\YetAnotherDriverStation.exe deploy\
        windeployqt deploy\YetAnotherDriverStation.exe --qmldir qml
        if exist "thirdparty\QHotkey\build\install\bin\*.dll" copy thirdparty\QHotkey\build\install\bin\*.dll deploy\

    - name: Upload Windows artifact
      uses: actions/upload-artifact@v4
      with:
        name: YetAnotherDriverStation-Windows
        path: deploy/

  build-macos:
    needs: [check-draft]
    if: always() && (github.event_name != 'pull_request' || needs.check-draft.outputs.is_draft == 'false')
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: mac
        target: desktop
        modules: 'qtnetworkauth qtmultimedia'
    
    - name: Install CMake
      uses: lukka/get-cmake@latest
    
    - name: Clone QHotkey
      run: |
        git clone https://github.com/Skycoder42/QHotkey.git thirdparty/QHotkey
        cd thirdparty/QHotkey
        git checkout master

    - name: Build QHotkey
      run: |
        cd thirdparty/QHotkey
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install
        make -j$(sysctl -n hw.ncpu)
        make install

    - name: Build application
      run: |
        qmake YetAnotherDriverStation.pro CONFIG+=release
        make -j$(sysctl -n hw.ncpu)
    
    - name: Package macOS
      run: |
        macdeployqt build/release/YetAnotherDriverStation.app -qmldir=qml
        mkdir -p build/release/YetAnotherDriverStation.app/Contents/Frameworks
        if [ -d "thirdparty/QHotkey/build/install/lib" ]; then
          cp -R thirdparty/QHotkey/build/install/lib/* build/release/YetAnotherDriverStation.app/Contents/Frameworks/
        fi

    - name: Create DMG
      run: |
        hdiutil create -volname "Yet Another Driver Station" -srcfolder build/release/YetAnotherDriverStation.app -ov -format UDZO YetAnotherDriverStation.dmg

    - name: Upload macOS artifact
      uses: actions/upload-artifact@v4
      with:
        name: YetAnotherDriverStation-macOS
        path: YetAnotherDriverStation.dmg

  build-linux:
    needs: [check-draft]
    if: always() && (github.event_name != 'pull_request' || needs.check-draft.outputs.is_draft == 'false')
    runs-on: ubuntu-20.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libudev-dev libgl1-mesa-dev libxkbcommon-dev libx11-dev libxtst-dev cmake build-essential
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: linux
        target: desktop
        arch: gcc_64
        modules: 'qtnetworkauth qtmultimedia'
    
    - name: Install CMake
      uses: lukka/get-cmake@latest
    
    - name: Clone QHotkey
      run: |
        git clone https://github.com/Skycoder42/QHotkey.git thirdparty/QHotkey
        cd thirdparty/QHotkey
        git checkout master

    - name: Build QHotkey
      run: |
        cd thirdparty/QHotkey
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install
        make -j$(nproc)
        make install
    
    - name: Build application
      run: |
        qmake YetAnotherDriverStation.pro CONFIG+=release
        make -j$(nproc)
    
    - name: Package Linux
      run: |
        mkdir -p deploy/usr/bin
        mkdir -p deploy/usr/lib
        cp build/release/YetAnotherDriverStation deploy/usr/bin/
        if [ -d "thirdparty/QHotkey/build/install/lib" ]; then
          cp -R thirdparty/QHotkey/build/install/lib/* deploy/usr/lib/
        fi
        
        # Create AppImage structure
        mkdir -p deploy/usr/share/applications
        mkdir -p deploy/usr/share/icons/hicolor/256x256/apps
        
        # Create desktop file
        cat > deploy/usr/share/applications/YetAnotherDriverStation.desktop << EOF
        [Desktop Entry]
        Type=Application
        Name=Yet Another Driver Station
        Exec=YetAnotherDriverStation
        Icon=YetAnotherDriverStation
        Categories=Development;
        EOF
        
        # Deploy Qt libraries
        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
        chmod a+x linuxdeployqt-continuous-x86_64.AppImage
        
        ./linuxdeployqt-continuous-x86_64.AppImage deploy/usr/bin/YetAnotherDriverStation -qmldir=qml -appimage || true
    
    - name: Upload Linux artifact
      uses: actions/upload-artifact@v4
      with:
        name: YetAnotherDriverStation-Linux
        path: deploy/

  # Comment on PR with download links
  pr-comment:
    needs: [build-windows, build-macos, build-linux]
    if: github.event_name == 'pull_request' && !failure() && !cancelled()
    runs-on: ubuntu-latest
    steps:
      - name: Comment PR
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const pr_number = context.payload.pull_request.number;
            const run_id = context.runId;
            
            const comment = `## ðŸš€ Build Artifacts Ready!
            
            Your PR has been built successfully across all platforms. Download the artifacts to test your changes:
            
            ### Windows Build
            - [Windows Build](https://github.com/${owner}/${repo}/actions/runs/${run_id})
            
            ### macOS Build
            - [macOS Build](https://github.com/${owner}/${repo}/actions/runs/${run_id})
            
            ### Linux Build
            - [Linux Build](https://github.com/${owner}/${repo}/actions/runs/${run_id})
            
            **Note:** Artifacts are available for 7 days. Click the links above to access the GitHub Actions page and download the artifacts.
            
            ### Testing Checklist
            Please test the relevant configurations for your changes:
            - [ ] Windows functionality
            - [ ] macOS functionality
            - [ ] Linux functionality
            - [ ] Robot communication
            - [ ] Emergency stop functionality
            - [ ] Global shortcuts (Space, Enter, Ctrl+E)
            - [ ] Controller detection
            - [ ] Feature flags work as expected
            `;
            
            github.rest.issues.createComment({
              owner,
              repo,
              issue_number: pr_number,
              body: comment
            });

  # Create release if this is a tag push or manual trigger
  release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
    
    - name: Create Release Archives
      run: |
        cd YetAnotherDriverStation-Windows
        zip -r ../YetAnotherDriverStation-Windows.zip .
        cd ../YetAnotherDriverStation-macOS
        tar -czf ../YetAnotherDriverStation-macOS.tar.gz .
        cd ../YetAnotherDriverStation-Linux
        tar -czf ../YetAnotherDriverStation-Linux.tar.gz .
        cd ..
    
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          YetAnotherDriverStation-Windows.zip
          YetAnotherDriverStation-macOS.tar.gz
          YetAnotherDriverStation-Linux.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: ${{ env.QT_VERSION }}
        host: linux
        target: desktop
        arch: gcc_64
    
    - name: Install CMake
      uses: lukka/get-cmake@latest
    
    - name: Clone QHotkey for test
      run: |
        mkdir -p thirdparty
        cd thirdparty
        git clone https://github.com/Skycoder42/QHotkey.git
        cd QHotkey
        git checkout master

    - name: Test QHotkey CMake build
      run: |
        cd thirdparty/QHotkey
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Debug -DQHOTKEY_INSTALL=OFF
        cmake --build . --config Debug
        cd ../../..
    
    - name: Test build configuration
      run: |
        qmake YetAnotherDriverStation.pro CONFIG+=debug
        make clean
        echo "Build configuration test passed"
    
    - name: Test feature flags
      run: |
        echo "Testing with all features disabled..."
        qmake YetAnotherDriverStation.pro CONFIG+=debug CONFIG+=no_fms_support CONFIG+=no_glass_integration CONFIG+=no_dashboard_management CONFIG+=no_practice_match CONFIG+=no_global_shortcuts
        make clean
        echo "Feature flags test passed"
